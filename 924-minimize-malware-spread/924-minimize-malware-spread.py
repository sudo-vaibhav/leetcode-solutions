class Solution:
    def minMalwareSpread(self, adjMat: List[List[int]], initial: List[int]) -> int:
        class UF:
            def __init__(self,n):
                self.parent = [i for i in range(n)]
                self.size = [1 for i in range(n)]
                self.sz = n
            
            def union(self,u,v):
                pu,pv = self.find(u),self.find(v)
                if pu==pv:
                    return False
                else:
                    if self.size[pu]<self.size[pv]:
                        self.parent[pu]=pv
                    elif self.size[pu]>self.size[pv]:
                        self.parent[pv]=pu
                    else:
                        self.parent[pu]=pv
                        self.size[pv]+=1
                    self.sz-=1
                    return True
            
            def find(self,v):
                if self.parent[v]==v:
                    return v
                else:
                    self.parent[v] = self.find(self.parent[v])
                    return self.parent[v]
        
        N = len(adjMat)
        uf = UF(N)
        for i in range(N):
            for j in range(N):
                if adjMat[i][j]==1:
                    uf.union(i,j)
        cc = defaultdict(set)
        initial.sort()
        elem,maxi = initial[0],-1
        initial = set(initial)
        for i in range(N):
            cc[uf.find(i)].add(i)
        
        for key in initial:
            elements = cc[uf.find(key)]
            sizeOfComp = len(elements)
            common = elements.intersection(initial)
            if len(common)>1 or len(common)==0:
                pass
            else:
                temp = list(common)[0]
                if sizeOfComp>maxi:
                    elem = temp
                    maxi = sizeOfComp
                # elif sizeOfComp==maxi:
                #     elem = min(elem,temp)
        return elem